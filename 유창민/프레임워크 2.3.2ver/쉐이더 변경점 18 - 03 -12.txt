변경점

1. 기존의 렌더링 을 위한 단계를  약간 수정

바로 쉐이더 클래스 변수를 하나만 갖도록 함.

기존에는 더블포인터였지만 이제 일차 포인터로 바꿈

창민씨가 했던 모델이 상당히 괜찮았음



	//기존에는 이랫다. 다수의 쉐이더 클래스를 가지고 있고, 포문을 돌면서
	//셋쉐이더를 통해 pso를 연결하고 공통 리소스를 연결후 게임오브젝트의 월드행렬과 정점과 인덱스 버퍼를 연결했다.
	//변경점은 다음과 같다. 그냥 하나의 쉐이더를 가지고 공통리소스를 연결한다음
	//pso를 연결하는데, 중요한건 쉐이더가 하나인만큼 그려야할 모든 리스트등을 가지고 있어야한다.
	//즉 다이나믹오브젝트리스트,불렛리스트 , 스테틱리스트 등 말이다
	//이런것을 그릴때 사용할 PSO는 다를 수 있고, 기존에는 이를위해 다수의 쉐이더로 가졋지만
	//이젠 그냥 다수의 PSO를 가지고, 그리기 전에 연결하는걸로 바꾸자. 이게 훨씬 편하다.
	
	//크게 요약하면

	//메모리 초기화 -> 렌더타겟과 깊이스텐실 버퍼 연결 -> 루트시그니처와 공통 리소스 연결 -> PSO연결->월드행렬및버텍스 연결



코드를보면

	//기본 그리기 쉐이더용 PSO 연결. 기본 그리기 쉐이더는 블렌드스테이트가 없고, 깊이쓰기가 On이다.
	SetShader(CommandList,false); <- 요렇게 게임오브젝트를 그리기 직전에
	//셋 쉐이더를 해줌. 그림자는 아마 그림자용 PSO를 연결해야하고
	//블렌딩도 다른 쉐이더를 연결해줘야함
//이제 쉐이더를 추가하고 싶으면

//쉐이더 클래스에 PSO를 추가한다음 생성해준다. 이후
//셋 쉐이더_어쩌구_ 함수를 만들기만 하면된다.


	for (auto b = DynamicObject->cbegin(); b != DynamicObject->cend(); b++)
	{
		//여기서 뭘하냐면 굳이 안그려도 되는 오브젝트를 제외한 오브젝트만 그린다.
		//즉 예를들어 카메라가 100만큼 볼수있는데 5000만큼 떨어진 녀석은 그릴필요가 없음


		if ((*b)->Blending)
		{

			//블랜딩용 PSO 연결
			SetShader(CommandList, true);
			//블랜딩용 PSO로 그림
			(*b)->Render(CommandList, gt);
			//다시 원상태 PSO로 연결
			SetShader(CommandList, false);
		}
		else//블랜딩 안씀
				(*b)->Render(CommandList, gt);
	}
	
