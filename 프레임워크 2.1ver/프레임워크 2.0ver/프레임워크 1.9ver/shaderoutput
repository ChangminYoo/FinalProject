//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer ObjectData
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64
//   float Scale;                       // Offset:   64 Size:     4
//   bool isAnimation;                  // Offset:   68 Size:     4
//
// }
//
// cbuffer JointArr
// {
//
//   struct Joint
//   {
//       
//       float4 orientation;            // Offset:    0
//       int parentID;                  // Offset:   16
//       float3 pos;                    // Offset:   20
//
//   } interpolatedSkeleton[65];        // Offset:    0 Size:  2080
//
// }
//
// cbuffer CameraData
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:   64 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  128 Size:    64
//   float3 gEyePos;                    // Offset:  192 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ObjectData                        cbuffer      NA          NA            cb0      1 
// JointArr                          cbuffer      NA          NA            cb1      1 
// CameraData                        cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXTURE                  0   xy          2     NONE   float   xy  
// STARTWEIGHT              0   x           3     NONE   float       
// WEIGHTCOUNT              0   x           4     NONE     int   x   
// JOINTID                  0   xyzw        5     NONE   float   xyzw
// WEIGHTPOS                0   xyzw        6     NONE   float   xyzw
// WEIGHTPOS                1   xyzw        7     NONE   float   xyzw
// WEIGHTPOS                2   xyzw        8     NONE   float   xyzw
// WEIGHTPOS                3   xyzw        9     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// DUMMY                    0      w        1     NONE   float       
// TEXTURE                  0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[130], dynamicIndexed
dcl_constantbuffer CB2[12], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v4.x
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xy
dcl_temps 12
//
// Initial variable locations:
//   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
//   v1.x <- vin.Normal.x; v1.y <- vin.Normal.y; v1.z <- vin.Normal.z; 
//   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
//   v3.x <- vin.StartWeight; 
//   v4.x <- vin.WeightCount; 
//   v5.x <- vin.JointID.x; v5.y <- vin.JointID.y; v5.z <- vin.JointID.z; v5.w <- vin.JointID.w; 
//   v6.x <- vin.WeightPos1.x; v6.y <- vin.WeightPos1.y; v6.z <- vin.WeightPos1.z; v6.w <- vin.WeightPos1.w; 
//   v7.x <- vin.WeightPos2.x; v7.y <- vin.WeightPos2.y; v7.z <- vin.WeightPos2.z; v7.w <- vin.WeightPos2.w; 
//   v8.x <- vin.WeightPos3.x; v8.y <- vin.WeightPos3.y; v8.z <- vin.WeightPos3.z; v8.w <- vin.WeightPos3.w; 
//   v9.x <- vin.WeightPos4.x; v9.y <- vin.WeightPos4.y; v9.z <- vin.WeightPos4.z; v9.w <- vin.WeightPos4.w; 
//   o1.w <- <VS return value>.dummy; 
//   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
//   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
//   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
//
#line 120 "D:\Dx12?제\D3D12Studying?는?Chapter 4 Direct3D Initialization\?레?워??2.0ver\?레?워??1.9ver\ShaderFile.hlsl"
ine r0.x, l(0, 0, 0, 0), cb0[4].y
if_nz r0.x

#line 122
  mov r0.xyzw, v6.xyzw  // r0.x <- tempVert.WeightPos1.x; r0.y <- tempVert.WeightPos1.y; r0.z <- tempVert.WeightPos1.z; r0.w <- tempVert.WeightPos1.w
  mov r1.xyzw, v7.xyzw  // r1.x <- tempVert.WeightPos2.x; r1.y <- tempVert.WeightPos2.y; r1.z <- tempVert.WeightPos2.z; r1.w <- tempVert.WeightPos2.w
  mov r2.xyzw, v8.xyzw  // r2.x <- tempVert.WeightPos3.x; r2.y <- tempVert.WeightPos3.y; r2.z <- tempVert.WeightPos3.z; r2.w <- tempVert.WeightPos3.w
  mov r3.xyzw, v9.xyzw  // r3.x <- tempVert.WeightPos4.x; r3.y <- tempVert.WeightPos4.y; r3.z <- tempVert.WeightPos4.z; r3.w <- tempVert.WeightPos4.w
  mov r4.x, v4.x  // r4.x <- tempVert.WeightCount

#line 123
  itof r4.yzw, l(0, 0, 0, 0)  // r4.y <- tempVert.PosL.x; r4.z <- tempVert.PosL.y; r4.w <- tempVert.PosL.z

#line 125
  mov r5.x, l(0)  // r5.x <- j
  mov r5.yzw, r4.yyzw  // r5.y <- tempVert.PosL.x; r5.z <- tempVert.PosL.y; r5.w <- tempVert.PosL.z
  mov r6.x, r5.x  // r6.x <- j
  loop 
    ilt r6.y, r6.x, r4.x
    breakc_z r6.y

#line 129
    dp4 r6.y, v5.xyzw, icb[r6.x + 0].xyzw
    ftou r6.y, r6.y
    imul null, r6.y, r6.y, l(2)
    mov r7.xyzw, cb1[r6.y + 0].xyzw  // r7.x <- tempJoint.orientation.x; r7.y <- tempJoint.orientation.y; r7.z <- tempJoint.orientation.z; r7.w <- tempJoint.orientation.w
    mov r6.yzw, cb1[r6.y + 1].yyzw  // r6.y <- tempJoint.pos.x; r6.z <- tempJoint.pos.y; r6.w <- tempJoint.pos.z

#line 130
    mov r7.xyzw, r7.xyzw  // r7.x <- tempJointOrientation.x; r7.y <- tempJointOrientation.y; r7.z <- tempJointOrientation.z; r7.w <- tempJointOrientation.w

#line 132
    switch r6.x

#line 134
      case l(0)

#line 135
      mov r8.xyzw, r0.xyzw  // r8.x <- tempWeightPos.x; r8.y <- tempWeightPos.y; r8.z <- tempWeightPos.z; r8.w <- tempWeightPos.w

#line 136
      break 

#line 137
      case l(1)

#line 138
      mov r8.xyzw, r1.xyzw  // r8.x <- tempWeightPos.x; r8.y <- tempWeightPos.y; r8.z <- tempWeightPos.z; r8.w <- tempWeightPos.w

#line 139
      break 

#line 140
      case l(2)

#line 141
      mov r8.xyzw, r2.xyzw  // r8.x <- tempWeightPos.x; r8.y <- tempWeightPos.y; r8.z <- tempWeightPos.z; r8.w <- tempWeightPos.w

#line 142
      break 

#line 143
      case l(3)

#line 144
      mov r8.xyzw, r3.xyzw  // r8.x <- tempWeightPos.x; r8.y <- tempWeightPos.y; r8.z <- tempWeightPos.z; r8.w <- tempWeightPos.w

#line 145
      break 

#line 147
      default 
      break 
    endswitch   // r8.x <- tempWeightPos.x; r8.y <- tempWeightPos.y; r8.z <- tempWeightPos.z; r8.w <- tempWeightPos.w

#line 148
    mov r9.x, -r7.x  // r9.x <- tempJointOrientationConjugate.x
    mov r9.y, -r7.y  // r9.y <- tempJointOrientationConjugate.y
    mov r9.z, -r7.z  // r9.z <- tempJointOrientationConjugate.z
    mov r9.w, r7.w  // r9.w <- tempJointOrientationConjugate.w

#line 152
    nop 
    nop 
    mov r7.xyzw, r7.xyzw
    itof r10.x, l(0)
    mov r8.xyz, r8.xyzx

#line 19
    mul r10.y, r7.x, r10.x
    mul r10.z, r7.w, r8.x
    add r10.y, r10.z, r10.y
    mul r10.z, r7.z, r8.y
    add r10.y, r10.z, r10.y
    mul r10.z, r7.y, r8.z
    mov r10.z, -r10.z
    add r11.x, r10.z, r10.y  // r11.x <- q.x

#line 20
    mul r10.y, r7.y, r10.x
    mul r10.z, r7.z, r8.x
    mov r10.z, -r10.z
    add r10.y, r10.z, r10.y
    mul r10.z, r7.w, r8.y
    add r10.y, r10.z, r10.y
    mul r10.z, r7.x, r8.z
    add r11.y, r10.z, r10.y  // r11.y <- q.y

#line 21
    mul r10.y, r7.z, r10.x
    mul r10.z, r7.y, r8.x
    add r10.y, r10.z, r10.y
    mul r10.z, r7.x, r8.y
    mov r10.z, -r10.z
    add r10.y, r10.z, r10.y
    mul r10.z, r7.w, r8.z
    add r11.z, r10.z, r10.y  // r11.z <- q.z

#line 22
    mul r7.w, r7.w, r10.x
    mul r7.x, r7.x, r8.x
    mov r7.x, -r7.x
    add r7.x, r7.x, r7.w
    mul r7.y, r7.y, r8.y
    mov r7.y, -r7.y
    add r7.x, r7.y, r7.x
    mul r7.y, r7.z, r8.z
    mov r7.y, -r7.y
    add r11.w, r7.y, r7.x  // r11.w <- q.w

#line 25
    mov r11.x, r11.x  // r11.x <- <QuaternionMultiply return value>.x
    mov r11.y, r11.y  // r11.y <- <QuaternionMultiply return value>.y
    mov r11.z, r11.z  // r11.z <- <QuaternionMultiply return value>.z
    mov r11.w, r11.w  // r11.w <- <QuaternionMultiply return value>.w

#line 152
    mov r11.xyzw, r11.xyzw
    mov r9.xyzw, r9.xyzw

#line 19
    mul r7.x, r11.x, r9.w
    mul r7.y, r11.w, r9.x
    add r7.x, r7.y, r7.x
    mul r7.y, r11.z, r9.y
    add r7.x, r7.y, r7.x
    mul r7.y, r11.y, r9.z
    mov r7.y, -r7.y
    add r7.x, r7.y, r7.x  // r7.x <- q.x

#line 20
    mul r7.w, r11.y, r9.w
    mul r8.x, r11.z, r9.x
    mov r8.x, -r8.x
    add r7.w, r7.w, r8.x
    mul r8.x, r11.w, r9.y
    add r7.w, r7.w, r8.x
    mul r8.x, r11.x, r9.z
    add r7.y, r7.w, r8.x  // r7.y <- q.y

#line 21
    mul r7.w, r11.z, r9.w
    mul r8.x, r11.y, r9.x
    add r7.w, r7.w, r8.x
    mul r8.x, r11.x, r9.y
    mov r8.x, -r8.x
    add r7.w, r7.w, r8.x
    mul r8.x, r11.w, r9.z
    add r7.z, r7.w, r8.x  // r7.z <- q.z

#line 25
    mov r7.x, r7.x  // r7.x <- <QuaternionMultiply return value>.x
    mov r7.y, r7.y  // r7.y <- <QuaternionMultiply return value>.y
    mov r7.z, r7.z  // r7.z <- <QuaternionMultiply return value>.z

#line 152
    mov r7.xyz, r7.xyzx  // r7.x <- rotatedPoint.x; r7.y <- rotatedPoint.y; r7.z <- rotatedPoint.z

#line 154
    mov r6.yzw, r6.yyzw  // r6.y <- tp.x; r6.z <- tp.y; r6.w <- tp.z

#line 155
    mov r7.xyz, r7.xyzx  // r7.x <- rp.x; r7.y <- rp.y; r7.z <- rp.z

#line 156
    mov r5.yzw, r5.yyzw  // r5.y <- tpv.x; r5.z <- tpv.y; r5.w <- tpv.z

#line 159
    add r6.yzw, r6.yyzw, r7.xxyz
    mul r6.yzw, r8.wwww, r6.yyzw
    add r5.yzw, r5.yyzw, r6.yyzw

#line 161
    iadd r6.x, r6.x, l(1)
  endloop 

#line 164
  mul r0.xyz, r5.yzwy, cb0[4].xxxx  // r0.x <- vin.PosL.x; r0.y <- vin.PosL.y; r0.z <- vin.PosL.z

#line 166
else 
  mov r0.xyz, v0.xyzx  // r0.x <- vin.PosL.x; r0.y <- vin.PosL.y; r0.z <- vin.PosL.z
endif 

#line 170
itof r0.w, l(1)
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- vout.PosH.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- vout.PosH.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- vout.PosH.z
dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- vout.PosH.w

#line 172
dp3 r0.x, v1.xyzx, cb0[0].xyzx  // r0.x <- vout.Normal.x
dp3 r0.y, v1.xyzx, cb0[1].xyzx  // r0.y <- vout.Normal.y
dp3 r0.z, v1.xyzx, cb0[2].xyzx  // r0.z <- vout.Normal.z

#line 173
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx

#line 175
dp4 r2.x, r1.xyzw, cb2[8].xyzw  // r2.x <- vout.PosH.x
dp4 r2.y, r1.xyzw, cb2[9].xyzw  // r2.y <- vout.PosH.y
dp4 r2.z, r1.xyzw, cb2[10].xyzw  // r2.z <- vout.PosH.z
dp4 r2.w, r1.xyzw, cb2[11].xyzw  // r2.w <- vout.PosH.w

#line 177
mov r1.xy, v2.xyxx  // r1.x <- vout.Tex.x; r1.y <- vout.Tex.y

#line 179
mov o0.xyzw, r2.xyzw
mov o1.xyz, r0.xyzx
mov o2.xy, r1.xyxx
ret 
// Approximately 145 instruction slots used
